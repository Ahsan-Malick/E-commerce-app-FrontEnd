import React from "react";
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
  CartAPI,
  CartDelete,
  CartUpdate,
  cartByUser,
  PostCartItems,
  CartReset,
} from "./cartAPI";

const initialState = {
  CartItems: [],
  status: "idle",
  SubTotal: null,
  error: null,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const postItemAsync = createAsyncThunk(
  "users/posttocart",
  async (cartData) => {
    const response = await PostCartItems(cartData);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const fetchCartByUserAsync = createAsyncThunk(
  "users/cartbyuser",
  async () => {
    const response = await cartByUser();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const updateCartAsync = createAsyncThunk(
  "cart/updatecart",
  async (product) => {
    const response = await CartUpdate(product);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const deleteCartAsync = createAsyncThunk(
  "cart/updatedelete",
  async (id) => {
    const response = await CartDelete(id);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const resetCartAsync = createAsyncThunk("cart/resetCart", async (id) => {
  const response = await CartReset(id);
  // The value we return becomes the `fulfilled` action payload
  return response.data;
});

export const cartSlice = createSlice({
  name: "cart",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
    storeCartTotal: (state, action) => {
      state.SubTotal = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(postItemAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(postItemAsync.fulfilled, (state, action) => {
        state.status = "idle";
        // const price=(action.payload[0].product.price);
        // const qty = (action.payload[0].quantity);
        // const subTotal = price*qty;
        // console.log(qty);
        state.CartItems = action.payload;
      })
      .addCase(postItemAsync.rejected, (state, action) => {
        state.status = "idle";
        state.error = action.error;
      })
      .addCase(fetchCartByUserAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchCartByUserAsync.fulfilled, (state, action) => {
        state.status = "idle";
        console.log(action.payload);
        state.CartItems = action.payload;
      })
      .addCase(updateCartAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(updateCartAsync.fulfilled, (state, action) => {
        state.status = "idle";
        const index = state.CartItems.findIndex(
          (items) => items.id === action.payload.id
        );
        state.CartItems[index] = action.payload;
      })
      .addCase(deleteCartAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(deleteCartAsync.fulfilled, (state, action) => {
        state.status = "idle";
        const index = state.CartItems.findIndex(
          (items) => items.id === action.payload.itemid
        );
        state.CartItems.splice(index, 1);
      })
      .addCase(resetCartAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(resetCartAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.CartItems = action.payload;
      });
  },
});

export const { increment, decrement, incrementByAmount, storeCartTotal } =
  cartSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCartItems = (state) => state.cart.CartItems;
export const selectCartError = (state) => state.cart.error;
export const selectCartSubTotal = (state) => state.cart.SubTotal;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default cartSlice.reducer;
