import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
  deleteAddress,
  fetchAddressbyid,
  fetchAddresses,
} from "./stacklistAPI";
const initialState = {
  addresses: [],
  status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const saveaddressesAsync = createAsyncThunk(
  "stacklist/saveaddresses",
  async (data) => {
    const response = await fetchAddresses(data);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const fetchaddressebyidAsync = createAsyncThunk(
  "stacklist/fetchaddressbyid",
  async (id) => {
    const response = await fetchAddressbyid(id);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const deleteaddressAsync = createAsyncThunk(
  "stacklist/deleteaddress",
  async (id) => {
    const response = await deleteAddress(id);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const stacklistSlice = createSlice({
  name: "saveAddresses",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(saveaddressesAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(saveaddressesAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.addresses.push(action.payload);
      })
      .addCase(fetchaddressebyidAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchaddressebyidAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.addresses = action.payload;
      })
      .addCase(deleteaddressAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(deleteaddressAsync.fulfilled, (state, action) => {
        state.status = "idle";
        const index = state.addresses.findIndex(
          (item) => item.id === action.payload.itemid
        );
        state.addresses.splice(index, 1);
      });
  },
});

export const { increment, decrement, incrementByAmount } =
  stacklistSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectAddresses = (state) => state.addresses.addresses;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default stacklistSlice.reducer;
